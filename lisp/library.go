// Copyright Â© 2018 The ELPS authors

package lisp

import (
	"io/ioutil"
	"path/filepath"
)

// SourceContext provides an execution context allowing SourceLibraries
// flexibility in determining how to interpret a path.
//
// NOTE:  SourceContext may be expanded with new methods yielding externally
// defined implementations incompatible.
type SourceContext interface {
	// Name is the name of the current source stream being evaluated which
	// caused the SourceLibrary LoadLocation operation.  Name is like Location
	// but is not necessarily tied to a physical location, or otherwise may be
	// ambiguous.
	//
	// NOTE:  Name may not be generated by the Runtime SourceLibrary due to
	// functions being sourced externally (in particular, the core language and
	// application standard library).  As such, the Name of a SourceContext is
	// meant only for informal use to assist humans and should not be relied
	// upon by a SourceLibrary.
	Name() string

	// Location is the current source location (e.g. file path) being evaluated
	// which caused the SourceLibrary LoadSource operation.  This may be used
	// in determining the location of relative target source locations.  If
	// executing code is not sourced from a lisp file then Location will return
	// an empty string -- this includes LoadSource operations triggered from
	// native Go functions and raw strings/[]bytes containing lisp code.
	// SourceLibraries should interpret an empty Location string as the process
	// working directory.
	Location() string
}

type sourceContext struct {
	name string
	loc  string
}

func (c *sourceContext) Name() string {
	return c.name
}

func (c *sourceContext) Location() string {
	return c.loc
}

// SourceLibrary is responsible for loading source code from a given path.  It
// is up to the SourceLibrary implementation how a source location should be
// interpreted.  Depending on the application a SourceLibrary implementation
// may require a Runtime with Reader that implements LocationReader -- though
// the LocationReader implementation should not need to depend on the
// LocationReader implementation beyond that.
type SourceLibrary interface {
	// LoadSource returns the data contained in the source file specified by a
	// location string obtained through a user call.  For example, the call
	// `(load-file "foo.txt")` would pass loc "foo.txt" to LoadSource).
	// LoadSource also receives a SourceContext object which may be used to
	// determine the physical path to the target location (e.g. what file is
	// loading "foo.txt"?).
	//
	// LoadSource returns four values: a name and true-location unambiguously
	// identifying the file, the file data, and any error that occurred while
	// retrieving data.  An interpreter must use trueloc as an identifier for
	// the requested source file anywhere the SourceContext ctx is unavailable.
	LoadSource(ctx SourceContext, loc string) (name, trueloc string, data []byte, err error)
}

// RelativeFileSystemLibrary implements SourceLibrary and reads lisp source
// files from the filesystem, relative to the source context location.
//
// In order to read filepaths relative to a source file's location the
// application's implementation of Runtime.Reader must implement
// LocationReader.
type RelativeFileSystemLibrary struct {
}

var _ SourceLibrary = (*RelativeFileSystemLibrary)(nil)

// LoadSource attempts to open loc as a filepath.
func (lib *RelativeFileSystemLibrary) LoadSource(ctx SourceContext, loc string) (string, string, []byte, error) {
	if !filepath.IsAbs(loc) && ctx.Location() != "" {
		loc = filepath.Join(filepath.Dir(ctx.Location()), loc)
	}
	name := filepath.Base(loc)
	data, err := ioutil.ReadFile(loc) //#nosec G304
	return name, loc, data, err
}
